/* Техническое задание

Мяу! Напиши программу для определения типа транспорта на велосипедной парковке.

Оформи решение в виде функции checkVehicle с двумя параметрами: количество колёс у транспорта и вес этого транспорта. Названия параметров могут быть любыми.

Если колеса два и вес транспорта меньше 100 кг, это велосипед. Функция должна возвращать строку 'Парковка разрешена'.

В остальных случаях функция должна возвращать строку 'Вам здесь не место! Мяу!'.

*/

-----------------------------------------

var checkVehicle = function (countWheels, weight ) {
    if (countWheels == 2 && weight < 100) {
        return 'Парковка разрешена';
      } else {
        return 'Вам здесь не место! Мяу!'
        }
  }

--------------------------------------------

На глубине
В студию Босса пришёл новый заказ: нужно написать ПО для наручных часов. Они должны работать под водой и показывать давление на глубине. Кекс боится воды, как огня, поэтому спешно передал эту задачу вам.

Мяу! Напиши функцию calculatePressure, которая будет считать давление на глубине и возвращать это значение из функции.

Формула расчёта такая: давление = плотность жидкости * ускорение свободного падения * глубина.

У calculatePressure должно быть два параметра: плотность жидкости и глубина. Названия параметров могут быть любыми.

Ускорение свободного падения записывать в параметры не нужно. В формуле можно использовать среднее фиксированное значение — 9.8.

Результат вычислений округляй с помощью Math.round().

Почему мы используем для ускорения свободного падения именно 9.8? Потому что показатели ускорения варьируются от 9,780 м/с² на экваторе до 9,832 м/с² на полюсах. Мы округляем эти показатели до одной цифры после запятой для простоты вычислений. Любое из этих значений округляется до 9.8, его мы и используем.

--------------------------------------------

var calculatePressure = function (liquidDensity, depth) {
    var gravity = 9.8;
    return Math.round(liquidDensity * gravity * depth);
  }

calculatePressure(3, 90);

--------------------------------

Калькулятор
Кекс задумал обзавестись собственным приложением — калькулятором для подсчёта прибыли веб-студии. Он придумал дизайн, иконку приложения, а за реализацией, конечно, пришёл к вам. Вам нужно написать главное в таком приложении — код, который сможет распознавать ввод пользователя и совершать математические операции.

Мяу! Напиши функцию calculate, которая будет распознавать пользовательский ввод, совершать математические операции и возвращать результат.

Параметры функции — firstNumber, secondNumber и operator.

Параметры firstNumber, secondNumber — операнды, параметр operator - оператор.

Все значения приходят в виде строк, в том числе и операторы. В третьем параметре содержится один из операторов: сложение ('+'), вычитание ('-'), умножение ('*'), деление ('/').

В зависимости от оператора программа должна совершать разные операции: складывать первое число со вторым, вычитать из первого числа второе, умножать первое на второе, делить первое на второе.

Не забудь сделать из строк с числами настоящие числа.

Если не привести строку с числом к числу, то результатом будет не число, как ожидается от калькулятора, а строка. Произойдёт конкатенация строк:

console.log('17' + '2');
// Выведет строку: 172
Чтобы из строки с числом сделать число, можно воспользоваться встроенной в JavaScript функцией parseInt. Она принимает на вход два аргумента: строку с числом и число, которое указывает на систему счисления для этой строки. Функция parseInt возвращает число, полученное из переданной строки, в указанной системе счисления.

parseInt('17', 10);   // Вернёт 17
parseInt('10001', 2); // Вернёт 17
parseInt('11', 16);   // Вернёт 17
В этой задаче мы работаем с числами десятичной системы счисления, поэтому передавайте вторым аргументом в parseInt число 10.

Как и с любой другой функцией, результат работы parseInt можно сразу использовать в вычислениях:

console.log(parseInt('122', 10) + parseInt('8', 10));
// Выведет число: 130

-----------------------------------------

var calculate = function (firstNumber, secondNumber, operator) {
    // var firstNumber = parseInt(prompt());
    // var secondNumber = parseInt(prompt());
    // var operator = parseInt(prompt());
    // return firstNumber + '' + operator + '' + secondNumber;
    if (operator === '-') {
        return parseInt(firstNumber, 10) - parseInt(secondNumber,10);
      } else if (operator === '+') {
        return parseInt(firstNumber, 10) + parseInt(secondNumber,10);
      } else if (operator === '*') {
        return parseInt(firstNumber,10) * parseInt(secondNumber,10);
      } else if (operator === '/') {
        return parseInt(firstNumber,10) / parseInt(secondNumber,10);
  }
}
// console.log(calculate('26','38', '-'));

--------------------------------------------

Достаточно
Кекс перешёл на новую систему подсчёта калорий. Он заранее планирует свой рацион на день и старается вписать его в суточный калораж. Наверное, вы уже догадались, что Кекс просит вас автоматизировать этот ежедневный процесс.

Мяу! Напиши программу, которая будет анализировать мой суточный рацион.

Оформи программу в виде функции getDiet. Она должна принимать два параметра: массив с калорийностью блюд и лимит калорий на день. Названия параметров могут быть любыми.

Программа должна возвращать количество блюд из массива, которые я могу съесть и не превысить допустимые калории. Блюда будут съедаться по порядку, начиная с первого элемента в массиве.

-------------------------------------------

var getDiet = function (calorieDishes, limitDay) {
    var count = 0;
    var calorieDay = 0;
    for (var i = 0; i < calorieDishes.length; i++) {
      calorieDay += calorieDishes[i];
      if (calorieDay > limitDay) {
        return count;
      }
      count ++;
    }
    return count;
  }

getDiet([100, 190, 100, 199, 600, 299, 177, 333], 1200);

---------------------------------------------------

Перекладывание бумажек
Кексу необходимо найти нужные отчёты за год. Документов накопилось очень много, они хранятся в базе данных. Название каждого документа хранится в формате 03052012 (03 — день, 05 — месяц, 2012 — год). Вам нужно написать программу, которая сможет определить количество отчётов за необходимый год.

Мяу! Напиши программу getDocumentsNumbers, которая будет возвращать число документов за указанный год.

У функции должно быть два параметра: массив с названиями документов и год, за который надо найти документы. Названия параметров могут быть любыми. Даты из массива записаны в виде строк.

Функция должна возвращать количество документов, в названии которых есть необходимый год.

Если таких документов в массиве нет, функция должна возвращать 0.

Чтобы найти год в названии документа вы можете использовать команду indexOf(). О ней мы говорили здесь. Можете попробовать более хитрые способы, если не хотите использовать indexOf(). Придётся проявить смекалку.

Скрыть подсказку
Обратите внимание, что у команды indexOf() есть второй параметр, который означает с какого индекса в строке начинать поиск.

// Ищем с начала строки
'котКексестКекс'.indexOf('Кекс');
'котКексестКекс'.indexOf('Кекс', 0);
// Во всех случаях выведет 3

// Ищем не с начала строки
'котКексестКекс'.indexOf('Кекс', 5);
'котКексестКекс'.indexOf('Кекс', 9);
'котКексестКекс'.indexOf('Кекс', 10);
// Во всех случаях выведет 10
Учтите в расчётах, что нужно выбирать документы только по номеру года, а не по дням и месяцам.

-----------------------------------------------------

var getDocumentsNumbers = function (nameDocument, year) {
  var count = 0;
  for (var i = 0; i < nameDocument.length; i++) {
    if (nameDocument[i].indexOf(year, 4) != -1) {
      count++;
    }
  }
  return count;
}

getDocumentsNumbers(["01112018","20092017","05102017","12052018","04072005","02022018"], 2018);

---------------------------------------------------------------

Как ты мне дорог
Вы уже считали зарплату нетто для будущих сотрудников Кекса. Там вычисления были примерными, теперь Босс хочет конкретики. Он хочет знать в какую сумму компании обходится каждый сотрудник.

Мяу! Напиши функцию calculateExpences, которая вычисляет ежемесячные затраты компании на сотрудника из «чистой» зарплаты работника.

Функция должна принимать параметр netSalary — это «чистая» зарплата после вычета налогов.

В переменную incomeTax записан размер НДФЛ в процентах.

В переменной contributions указан общий размер взносов в процентах.

Функция должна возвращать общие затраты компании на сотрудника. Округляй результат вычислений с помощью Math.round().

Разберёмся на примере, как устроены затраты работодателя на одного сотрудника. Если «чистая» зарплата сотрудника 87 тысяч, то работодатель тратит 100 тысяч — 87 работнику и 13 в налоговую (НДФЛ 13%). Это «грязная» зарплата. Ещё нужно заплатить различные взносы, это около 30% от «грязной» зарплаты сотрудника. Получается такой список:

// «Грязная» зарплата
100000

// «Чистая» зарплата
100000 - (100000 / 100 * 13) = 87000

// Взносы
100000 / 100 * 30 = 30000

// Все затраты работодателя
100000 + 30000 = 130000
В задаче нам нужно найти все затраты работодателя, в примере выше это 130000.

------------------------------------------------------------

