Знакомимся с переключением тем
Мяу! Кто тут сидит без дела? А ну за работу, новости не ждут!

Знакомьтесь, это Кекс, кот и владелец веб-студии. Именно его ребята создают новостной сайт, чью главную страницу мы видели в прошлом задании. Кажется, Кекс принял нас за одного из своих разработчиков. Почему бы не подыграть ему? Ведь самый эффективный способ чему-то научиться — это практика. Так что там нужно хвостатому боссу?

У новостного сайта есть две темы: светлая и тёмная. Наша задача — сделать так, чтобы посетители могли переключаться между ними, щёлкая по кнопке «Изменить тему». В будущем переключать темы пользователи смогут на любой странице сайта, но тестировать наш скрипт мы будем на одной — на странице подписки. Всё содержимое страницы находится внутри элемента с классом page. За светлую тему отвечает класс light-theme, а за тёмную — dark-theme. Чтобы темы менялись, нам нужно убирать с page один класс и добавлять другой.

Перед тем, как писать скрипт, давайте вручную переключим тему на странице — это поможет лучше понять задачу. Для этого поменяем классы у элемента page прямо в разметке.

----------------------------------------

Находим элемент с помощью querySelector
Мы переключили тему на странице, вручную поменяв классы в разметке. Пришло время сделать это с помощью JavaScript.

Программа на JavaScript — это последовательность инструкций, которые указывают браузеру выполнить какие-то действия. Мы собираемся менять классы у элемента page, и в первую очередь должны получить доступ к нему из скрипта. Как это сделать? Представьте, что JavaScript — это очень умная собака. Она знает множество команд, в том числе «найди и принеси элемент» — querySelector:

document.querySelector('селектор');
Обратите внимание, эта инструкция состоит из двух частей. Первая часть — это элемент, внутри которого будет искать JavaScript. Словом document обозначается веб-страница, к которой подключили скрипт. Неважно, как называется файл на самом деле, в JavaScript это всегда «документ». Он является элементом-родителем для любого другого элемента на странице.

Вторая часть инструкции — это то, что нужно сделать. Её называют методом. Метод querySelector ищет по селектору. Не знаете, что это такое? Тогда вам стоит заглянуть в «Основы CSS», там всему научат.

Чтобы сказать JavaScript, что инструкция закончена, нужно поставить точку с запятой или перейти на новую строку. Новая строка правильно работает в большинстве случаев, а точка с запятой — всегда. Поэтому лучше ставить точку с запятой в конце каждой инструкции.

Итак, чтобы найти на странице элемент с классом page, мы должны написать:

document.querySelector('.page');
Подключим к странице файл, в котором будем писать наш код, и найдём нужный элемент.

--------------------------------------------

Меняем текстовое содержимое элемента
Мы нашли нужный элемент и вывели в консоль его текстовое содержимое. Но для нашей задачи это содержимое нужно изменить. Как это сделать? Присвоим свойству textContent новое значение.

Возьмём абзац с текстом:

<p>Здесь могла быть ваша реклама.</p>
И перезапишем его текстовое содержимое:

let paragraph = document.querySelector('p');
paragraph.textContent = 'Здесь был Кекс. Мяу!';
Обратите внимание, что строки с текстом нужно заключать в кавычки.

Когда инструкция выполнится, текст внутри абзаца изменится:

<p>Здесь был Кекс. Мяу!</p>
Когда мы присваиваем свойству textContent новое значение, оно полностью заменяет собой старое. Как и в случае с переключением классов, JavaScript не влияет на исходную разметку, а меняет текст прямо в браузере пользователя.

Свойство textContent предназначено только для текста, если записать туда HTML-теги, браузер их не поймёт.

-----------------------------------------------

Получаем данные из поля ввода
Мы научились с помощью скрипта изменять текст на странице, когда пользователь отправляет форму. У нас это форма подписки на рассылку, и нам нужно сообщить пользователю, что он успешно подписался. Сообщение будет выглядеть так:

Адрес e-mail добавлен в список получателей рассылки.
Адрес электронной почты в сообщении должен быть тем, который введёт пользователь. Как его получить?

Нам поможет особое свойство, которое есть у полей ввода, — value. Допустим, на странице есть поле ввода input:

<input type="text">
Босс проходил мимо и ввёл туда своё имя — Кекс. С помощью свойства value мы можем получить данные из этого поля ввода. А после, например, вывести их в консоль:

let input = document.querySelector('input');
console.log(input.value);
// Выведет: Кекс
А ещё мы можем вывести данные из поля ввода прямо на страницу. Представим, что у нас на странице есть абзац, который мы нашли и сохранили в переменную paragraph. Мы можем сделать так:

paragraph.textContent = input.value;
И теперь то, что ввёл пользователь в поле input, отобразится на странице как текстовое содержимое элемента paragraph.

В нашем случае пользователь вводит свой адрес в поле с классом subscription-email. Найдём его и скажем JavaScript вывести полученные данные на страницу.

Почему бы не прочитать текст из поля ввода с помощью textContent? Если мы попытаемся это сделать, то получим пустую строку. Для JavaScript поля формы не имеют текстового содержимого, их значения хранятся именно в value.

-------------------------------------------------------

