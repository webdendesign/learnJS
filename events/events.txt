Добро пожаловать в нашу галерею
Мяу! Ты хорошо справился с задачей, но нет времени на отдых!

Нужно запрограммировать галерею с моими фотографиями для сайта нашей веб-студии. Заказчики должны знать героя веб-разработки в лицо!

Галерея состоит из нескольких миниатюр (элементы с классом gallery__photo-preview) и большой фотографии (класс full-photo). По клику на миниатюру должно меняться большое изображение. Большая картинка должна соответствовать превью, по которой кликнул пользователь.

Данные для изображений собраны в массив photos. Каждый элемент массива — путь до полноразмерной фотографии. Порядок элементов в этом массиве такой же, как и порядок миниатюр в разметке.

Верстальщик уже всё подготовил: изображения превью лежат внутри кнопок с классом gallery__photo-preview, клики именно по этим кнопкам будут менять содержимое большого изображения (класс full-photo). От нас, как обычно, требуется запрограммировать взаимодействие интерфейса с пользователем.

Сначала мы найдём все миниатюры с помощью querySelectorAll и большое изображение через querySelector, запишем найденные элементы в переменные.

Мы знакомились с querySelectorAll в этом и этом заданиях главы «Знакомство с JavaScript в браузере». Загляните туда, если вы забыли, как работает этот метод.

------------------------------------------

Область видимости
Ошибка обнаружена! Индекс последнего элемента в массиве photos — 4, а значение i в нашем коде 5, по какой миниатюре мы бы ни кликнули. В массиве photos у нас нет элемента с таким индексом, поэтому мы и получаем undefined вместо адреса изображения и никакой картинки не появляется. Но почему такое вообще происходит?

Давайте немного отойдём в сторону от нашей задачи и разберёмся с одной важной концепцией JavaScript. Это поможет решить нашу проблему с галереей.

Напишем функцию eatDinner. Она выводит в консоль сообщения о нашем обеде. У неё есть параметр drink и переменная food

var eatDinner = function (drink) {
  var food = 'макароны';
  console.log('Поел ' + food);
  console.log('Выпил ' + drink);
};

eatDinner('компот');
// Выведет: Поел макароны
// Выведет: Выпил компот

console.log('Поел ' + food);
// Выведет ошибку

console.log('Выпил ' + drink);
// Выведет ошибку
Если мы попробуем снаружи получить доступ к переменной food у нас ничего не получится — консоль выдаст ошибку. Потому что переменные из тела функции доступны только внутри этой функции. Снаружи их получить нельзя.

То же самое произойдёт, если мы захотим обратиться снаружи к параметру функции. Параметр хоть и задаётся снаружи, ведёт себя, как переменная внутри функции.

Почему так?

Потому что у каждой функции есть область видимости — все значения, доступные для этой функции. Область видимости ограничивается самой функцией. Так как переменная food объявлена внутри функции eatDinner, она доступна только внутри области видимости этой функции, как и параметр drink. Такие переменные называются локальными переменными функции. Их область видимости ограничена функцией, в которой они объявлены, и за её пределами эти переменные получить нельзя, поэтому такая область видимости тоже называется локальной.

Давайте в этом убедимся. Вызовем функцию, а затем снаружи попробуем получить доступ к параметру и переменной из тела функции eatDinner.

------------------------------------

Глобальная область видимости
Локальная область видимости ограничена функцией, поэтому мы не можем получить переменные функции извне. Но внутри функций, а не снаружи, всё работает по-другому.

Если внутри функции есть обращение к какой-то не локальной переменной, JavaScript обратится на уровень выше, за пределы функции, чтобы найти необходимую переменную. Говорят, что чтение переменных происходит изнутри области видимости наружу.

var food = 'салат';

var eatDinner = function () {
  // Внутри функции не объявлены локальные переменные
  console.log('Поел ' + food);
};

eatDinner();
// Функция обратится к переменной food,
// которая объявлена снаружи eatDinner
// Выведет: Поел салат
В нашем примере переменная food объявлена не внутри какой-то функции. Она объявлена на уровне всей программы, поэтому её видно отовсюду, то есть можно использовать внутри любой функции. Такие переменные, которые объявляются на самом верхнем уровне, вне каких-то функций, называются глобальными. А область видимости, в которой они находятся, называется глобальной областью видимости. Из названия понятно, что переменные из этой области видимости видны по всему коду программы и доступны во всех блоках кода.

Если внутри функции будет обращение к переменной, которая не объявлена ни в одной области видимости, консоль выдаст ошибку.

---------------------------------------------------------

Перемены снаружи — перемены внутри
Из-за того, что переменные ищутся изнутри наружу, снаружи можно переопределять переменные, которые используются внутри функции.

Представьте, что вы школьник и, наконец-то, настало время обеда. Вы идёте в столовую. Сегодня на обед котлеты. И не с макарошками, а с пюрешкой! Вы обедаете и идёте учиться дальше. Много уроков, продлёнка, и вот уже время ужина. Вы снова идёте в столовую, а там закончились котлеты, поэтому на ужин сельдерей. И вы ужинаете сельдереем, деваться некуда. Воспроизведём этот пример в коде.

var food = 'котлеты с пюрешкой';

var eatDinner = function () {
  console.log('Поел ' + food);
};

eatDinner();
// Выведет: Поел котлеты с пюрешкой

// Переопределяем переменную food
food = 'сельдерей';

eatDinner();
// Выведет: Поел сельдерей
Сначала значение глобальной переменной food было 'котлеты с пюрешкой'. Мы вызвали функцию и она использовала это значение, потому что оно было актуально на тот момент. Затем значение food изменилось на 'сельдерей'. С этого места в коде и ниже, старого значения переменной больше нет. Поэтому, когда мы вызвали функцию после переопределения переменной, функция использовала новое значение.

-------------------------------------------------------

Стань независимым
Мы выяснили, что переопределение глобальных переменных влияет на результат работы функции, которая эти переменные использует. Но, вообще-то, так делать не стоит — это не лучшая практика. Переопределение переменных, которые использует функция, может приводить к неожиданным последствиям и ошибкам в коде. Поэтому и существуют параметры, чтобы переиспользовать функции, явно передавая необходимые значения.

С параметрами всё легко и понятно, если мы хотим сразу вызвать функцию и получить результат её работы.

var eatDinner = function (food) {
  console.log('Поел ' + food);
};

eatDinner('стейк');
// Выведет: Поел стейк
Что делать, если мы хотим зафиксировать в функции какое-то значение, а получить результат позже? Мы поступаем так с событиями: создаём функцию, используем внутри какие-то значения, но результат получаем не сразу, а когда совершится какое-то событие. Правда, не всегда всё идёт гладко, прям как у нас в галерее. Но мы на пути решения проблемы.

Вернёмся к примеру со школьником. Что, если школьник не хочет есть сельдерей? И вообще не хочет зависеть от еды, которая сейчас есть в столовой? Конечно, ему нужно взять еду с собой из дома! Тогда у него всегда будет в рюкзаке контейнер с едой. Он сможет в любой момент его достать и перекусить. Как реализовать это в коде?

var collectContainer = function () {
  var food = 'макароны';
  var eatDinner = function () {
    console.log('Поел ' + food);
  }
  return eatDinner;
};

var schoolkid = collectContainer();
// В переменной функция eatDinner,
// которую вернула функция collectContainer

// Вызываем функцию eatDinner из переменной schoolkid
schoolkid();
// Выведет: Поел макароны
Не пугайтесь, в следующем задании мы подробно разберём, как эта запись работает и почему. А пока давайте убедимся, что этот код действительно выполняется так, как показано в примере.

--------------------------------------------------------------

Замыкания
Код действительно работает. В чём секрет такой странной записи и что она вообще означает?

var collectContainer = function () {
  var food = 'макароны';
  var eatDinner = function () {
    console.log('Поел ' + food);
  }
  return eatDinner;
};

var schoolkid = collectContainer();
schoolkid();
// Выведет: Поел макароны
Мы хотим, чтобы функция получила фиксированное значение, которое бы не зависело от изменений в глобальной области видимости. При этом результат работы функции мы хотим получить не сразу. Как с событиями, когда мы создаём обработчик, но ждём выполнение события не сразу. В нашем примере мы собираем школьнику контейнер с едой, чтобы он мог перекусить любимыми макаронами независимо от того, что дают в столовой.

Код из примера работает так: мы вызываем collectContainer → функция collectContainer возвращает eatDinner → вызываем eatDinner.

Мы создаём функцию внутри функции. Таким образом мы создаём одну область видимости внутри другой области видимости. У eatDinner своя область видимости, в которой идёт обращение к переменной food. Эта переменная объявлена внутри collectContainer, у которой своя область видимости.

Функция eatDinner не находит внутри себя создание переменной food, смотрит в соседнюю область видимости (в область видимости collectContainer). Там она находит переменную food, узнаёт, что её значение равно строке 'макароны', и фиксирует это значение в памяти.

Постойте! Мы же выводили в консоль переменную schoolkid и там не было никаких макарон!

var collectContainer = function () {
  var food = 'макароны';
  var eatDinner = function () {
    console.log('Поел ' + food);
  };
  return eatDinner;
};

var schoolkid = collectContainer();
console.log(schoolkid);
// Выведет: function () { console.log('Поел ' + food); }
Всё верно. Код самой функции не меняется, просто в памяти вместе с функцией хранится то значение переменной, которое было при объявлении этой функции. Поэтому eatDinner «помнит» значение food. Это особенность функций, они помнят своё окружение в момент своего создания. В таком случае говорят о замыкании. Замыкание — функция, которая помнит о своём окружении. То есть это функция + все значения переменных вне локальной области видимости этой функции. Речь идёт только о переменных, которые функция использует в своём коде.

В нашем примере функция eatDinner вместе с переменной food являются замыканием.

Именно благодаря замыканиям код из примера выше работает. eatDinner помнит о значении food при своём создании, поэтому использует это значение в момент вызова. Как если бы мама сказала нам купить картошки, когда мы будем идти мимо магазина. Мы запомнили про картошку и пошли по своим делам. Когда мы увидели магазин, мы вспомнили, что именно картошка была нужна, мы её купили и пошли домой.

Убедимся, что замыкания позволяют школьнику есть макароны из контейнера независимо от еды в столовой.

-----------------------------------------------------

Собираемся в школу
Всё работает. На функцию никак не влияют глобальные переменные.

Наш пример рабочий, но он жёстко привязан к значению внутри функции collectContainer. Может школьник не хочет есть каждый раз только макароны? Нужно дать ему возможность выбора. Да и чаще всего мы передаём какие-то значения в функцию, а не жёстко фиксируем их внутри локальной области видимости. Добавим функции collectContainer параметр.


var collectContainer = function (food) {
  return function () {
    console.log('Поел ' + food);
  };
};

var schoolkid = collectContainer('макароны');
schoolkid();
// Выведет: Поел макароны
Теперь значение food будет использовано из параметра, а не из локальной переменной функции collectContainer. Работать всё будет точно так же. Функция, которую возвращает collectContainer, будет запоминать значение параметра и использовать его при своём вызове.

Внутреннюю функцию мы сделали анонимной, потому что имя eatDinner нигде не используется. Это никак не повлияет на работу функции.

Представим, что школьников теперь двое. Каждый из них возьмёт из дома контейнер с едой.

Убедимся, что переопределение глобальных переменных не повлияет на работу нашей функции collectContainer.

Обратите внимание, что каждый раз, когда мы будем вызывать функцию collectContainer и записывать результат в переменную, в памяти будет создаваться новое замыкание, которое будет помнить о значении параметра food в момент своего создания.

--------------------------------------------------------------------

Чиним галерею
После знакомства с областями видимости и замыканиями, вернёмся к нашей задаче. Что же случилось у нас в коде? Почему программа не работает как надо?

for (var i = 0; i < thumbnails.length; i++) {
  thumbnails[i].addEventListener('click', function () {
    fullPhoto.src = photos[i];
  });
}
Обработчики, которые мы создали, используют значение счётчика i. Сложность в том, что обработчики срабатывают не сразу, а в момент наступления события. К тому моменту, когда первое событие клика выполняется, цикл полностью отработал, значение счётчика стало максимальным — 5, и функция-обработчик берёт именно это значение. Цикл не создаёт отдельную область видимости, это ведь не функция. Поэтому значение i находится в глобальной области и каждый обработчик обращается к этому значению 5. А у нас нет миниатюры с таким индексом и элемента в массиве photos, поэтому никакая картинка и не подставляется.

Как нам это исправить? Нам помогут замыкания!

Мы создадим функцию, которая будет принимать в качестве параметров миниатюру и подходящий элемент из массива photos. А уже внутри этой функции будем добавлять обработчики. Тогда каждый обработчик будет брать значения из своего замыкания — из параметров функции, в которой находится обработчик.

У каждого обработчика будет собственное замыкание, поэтому значения в обработчиках не будут повторяться, как это было раньше.

Давайте постепенно улучшим нашу программу так, чтобы она работала корректно.

----------------------------------------------------------------

Дело раскрыто
Замыкания нам помогли, галерея почти работает!

На каждой итерации мы передаём разные значения в addThumbnailClickHandler. Каждый обработчик получает своё замыкание, в котором находятся какие-то конкретные значения параметров thumbnail, photo. Именно эти значения использует каждый обработчик при происхождении события. И теперь значение индекса в уже отработавшем цикле никак не влияет на нашу программу.

Осталось заменить выводы в консоль на замену src у большого изображения, и убедиться, что код работает правильно.

-------------------------------------------------------------

Конспект «События в JavaScript». 2 часть
Области видимости
У каждой функции есть область видимости — все значения, доступные для этой функции.

Область видимости ограничена функцией, поэтому снаружи нельзя получить локальные переменные и параметры функции.

Локальные переменные — переменные, у которых область видимости ограничена функцией, где они объявлены. Такая область видимости называется локальной.

Глобальные переменные — переменные, которые объявлены на уровне всей программы, их видно из любого блока кода. Область видимости, в которой они объявлены, называется глобальной.

Если внутри функции обратиться не к локальной переменной, JavaScript будет искать переменную снаружи, переходя наверх от уровня к уровню, пока не найдёт переменную. Если переменной не будет ни внутри функции ни снаружи, будет ошибка.

Так как функция может использовать переменные, объявленные снаружи, их можно переопределять.

var food = 'макароны';

var eatDinner = function () {
  console.log('Поел ' + food);
};

eatDinner();
// Выведет: Поел макароны

// Переопределяем переменную food
food = 'сельдерей';

eatDinner();
// Выведет: Поел сельдерей
Переопределять снаружи переменные, которые использует функция — не лучшая практика. Это может приводить к неожиданным последствиям и ошибкам в коде. Использовать это нужно осторожно.

Области видимости создаются только функциями. Поэтому, если переменная была создана в другой конструкции, например, в цикле, она будет доступна для чтения из функции.

Замыкания
Замыкание — функция, которая помнит о своём окружении. Это функция + все значения вне локальной области видимости, которые она использует.

Благодаря замыканиям мы можем зафиксировать какое-то значение в функции, а использовать саму функцию позже.

var collectContainer = function (food) {
  return function () {
    console.log('Поел ' + food);
  };
};

var schoolkid = collectContainer('макароны');
schoolkid();
// Выведет: Поел макароны
Замыкания и асинхронность
Некоторые функции выполняются асинхронно, поэтому в момент выполнения кода значение переменной может уже измениться. Чтобы избавиться от этой проблемы, нужно создать отдельную область видимости. Так все переменные будут под контролем и замыкания не позволят потерять необходимые значения.

var thumbnails = document.querySelectorAll('.gallery__photo-preview');
var fullPhoto = document.querySelector('.full-photo');

var addThumbnailClickHandler = function (thumbnail, photo) {
  thumbnail.addEventListener('click', function () {
    fullPhoto.src = photo;
  });
};

for (var i = 0; i < thumbnails.length; i++) {
  addThumbnailClickHandler(thumbnails[i], photos[i]);
}

-------------------------------------------------------------

var pictures = [
  'gallery-tomato/tomato-red-large.jpg',
  'gallery-tomato/tomato-yellow-large.jpg',
  'gallery-tomato/tomato-strange-large.jpg'
];

/* Техническое задание

Мяу! Нужно оживить галерею с фотографиями товаров.

В галерее есть миниатюры (элементы с классом 'gallery__picture-preview') и большое изображение (класс 'full-picture').

После клика по превью большая фотография должна поменяться. Большое изображение должно быть таким же, как и в миниатюре, только большего размера.

Пути к полноразмерным фотографиям находятся в массиве pictures. Порядок элементов в массиве такой же, как и порядок миниатюр в разметке.

*/

--------------------------------------------------

var pictures = [
  'gallery-tomato/tomato-red-large.jpg',
  'gallery-tomato/tomato-yellow-large.jpg',
  'gallery-tomato/tomato-strange-large.jpg'
];

var thumbnails = document.querySelectorAll('.gallery__picture-preview');
var fullPicture = document.querySelector('.full-picture');


var addPictureClickHandler = function (prevPictur, picture) {
  prevPictur.addEventListener('click', function () {
    fullPicture.src = picture;
  });
};

for (var i = 0; i < thumbnails.length; i++) {
    addPictureClickHandler(thumbnails[i], pictures[i]);
  }
